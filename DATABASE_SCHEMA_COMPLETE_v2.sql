-- =====================================================
-- FreelanceHub Complete Database Schema Export v2.0
-- Generated: 2025-06-24
-- 
-- Features Included:
-- ✓ User Management (Admin, Client, Freelancer roles)
-- ✓ Job Approval Workflow (Pending -> Approved/Rejected)
-- ✓ Messaging System (Real-time communication)
-- ✓ Project Management (Tasks, Files, Members)
-- ✓ Proposal System (Freelancer applications)
-- ✓ Admin Moderation (User/Job/Proposal management)
-- ✓ Contract Management (Accepted proposals)
-- ✓ Permission System (Role-based access)
-- ✓ Session Management (Secure authentication)
-- =====================================================

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- =====================================================
-- USERS TABLE (Core user management)
-- =====================================================
CREATE TABLE public.users (
    id text NOT NULL PRIMARY KEY,
    email text NOT NULL UNIQUE,
    password_hash text,
    first_name text NOT NULL,
    last_name text NOT NULL,
    user_type text NOT NULL, -- 'admin', 'client', 'freelancer'
    status text DEFAULT 'active'::text, -- 'active', 'pending', 'suspended'
    company text,
    title text,
    bio text,
    skills jsonb DEFAULT '[]'::jsonb,
    hourly_rate integer,
    location text,
    timezone text,
    phone_number text,
    website text,
    portfolio text,
    experience text, -- 'entry', 'intermediate', 'expert'
    rating integer DEFAULT 0,
    total_jobs integer DEFAULT 0,
    completed_jobs integer DEFAULT 0,
    total_earnings integer DEFAULT 0,
    profile_image text,
    last_login_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);

-- =====================================================
-- JOBS TABLE (With approval workflow)
-- =====================================================
CREATE TABLE public.jobs (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title text NOT NULL,
    description text NOT NULL,
    client_id text NOT NULL,
    category text NOT NULL,
    budget_type text NOT NULL, -- 'fixed' or 'hourly'
    budget_min integer,
    budget_max integer,
    hourly_rate integer,
    experience_level text NOT NULL,
    skills jsonb DEFAULT '[]'::jsonb,
    status text DEFAULT 'active'::text,
    approval_status text DEFAULT 'pending'::text, -- 'pending', 'approved', 'rejected'
    approved_by text,
    approved_at timestamp without time zone,
    rejection_reason text,
    remote boolean DEFAULT false,
    duration text,
    deadline timestamp without time zone,
    urgency_level text DEFAULT 'normal'::text, -- 'low', 'normal', 'high', 'urgent'
    proposal_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (client_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (approved_by) REFERENCES public.users(id) ON DELETE SET NULL
);

-- =====================================================
-- PROPOSALS TABLE (Freelancer job applications)
-- =====================================================
CREATE TABLE public.proposals (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    job_id integer NOT NULL,
    freelancer_id text NOT NULL,
    cover_letter text NOT NULL,
    proposed_rate integer,
    estimated_duration text,
    status text DEFAULT 'pending'::text, -- 'pending', 'accepted', 'rejected', 'suspended'
    attachments jsonb DEFAULT '[]'::jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (job_id) REFERENCES public.jobs(id) ON DELETE CASCADE,
    FOREIGN KEY (freelancer_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- PROJECTS TABLE (Work management)
-- =====================================================
CREATE TABLE public.projects (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title text NOT NULL,
    description text NOT NULL,
    client_id text NOT NULL,
    freelancer_id text,
    job_id integer,
    status text DEFAULT 'active'::text, -- 'active', 'completed', 'cancelled', 'in_progress'
    budget integer,
    deadline timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (client_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (freelancer_id) REFERENCES public.users(id) ON DELETE SET NULL,
    FOREIGN KEY (job_id) REFERENCES public.jobs(id) ON DELETE SET NULL
);

-- =====================================================
-- CONTRACTS TABLE (Accepted proposals become contracts)
-- =====================================================
CREATE TABLE public.contracts (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    proposal_id integer NOT NULL,
    client_id text NOT NULL,
    freelancer_id text NOT NULL,
    status text DEFAULT 'active'::text, -- 'active', 'completed', 'cancelled'
    start_date timestamp without time zone DEFAULT now(),
    end_date timestamp without time zone,
    total_amount integer,
    total_earnings integer,
    terms text,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (proposal_id) REFERENCES public.proposals(id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (freelancer_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- TASKS TABLE (Project task management)
-- =====================================================
CREATE TABLE public.tasks (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id integer NOT NULL,
    title text NOT NULL,
    description text,
    assigned_to text,
    status text DEFAULT 'pending'::text, -- 'pending', 'in_progress', 'completed'
    priority text DEFAULT 'medium'::text, -- 'low', 'medium', 'high'
    due_date timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE,
    FOREIGN KEY (assigned_to) REFERENCES public.users(id) ON DELETE SET NULL
);

-- =====================================================
-- PROJECT_MEMBERS TABLE (Team collaboration)
-- =====================================================
CREATE TABLE public.project_members (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id integer NOT NULL,
    user_id text NOT NULL,
    role text DEFAULT 'member'::text, -- 'owner', 'admin', 'member'
    joined_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE,
    UNIQUE(project_id, user_id)
);

-- =====================================================
-- PROJECT_FILES TABLE (File sharing)
-- =====================================================
CREATE TABLE public.project_files (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id integer NOT NULL,
    uploaded_by text NOT NULL,
    file_name text NOT NULL,
    file_path text NOT NULL,
    file_size integer,
    file_type text,
    created_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE,
    FOREIGN KEY (uploaded_by) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- PROJECT_MESSAGES TABLE (Project communication)
-- =====================================================
CREATE TABLE public.project_messages (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id integer NOT NULL,
    sender_id text NOT NULL,
    content text NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE,
    FOREIGN KEY (sender_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- MESSAGES TABLE (Direct messaging system)
-- =====================================================
CREATE TABLE public.messages (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sender_id text NOT NULL,
    receiver_id text NOT NULL,
    content text NOT NULL,
    job_id integer,
    proposal_id integer,
    read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (sender_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (job_id) REFERENCES public.jobs(id) ON DELETE SET NULL,
    FOREIGN KEY (proposal_id) REFERENCES public.proposals(id) ON DELETE SET NULL
);

-- =====================================================
-- SAVED_JOBS TABLE (Freelancer bookmarks)
-- =====================================================
CREATE TABLE public.saved_jobs (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id text NOT NULL,
    job_id integer NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (job_id) REFERENCES public.jobs(id) ON DELETE CASCADE,
    UNIQUE(user_id, job_id)
);

-- =====================================================
-- USER_SESSIONS TABLE (Authentication management)
-- =====================================================
CREATE TABLE public.user_sessions (
    id text NOT NULL PRIMARY KEY,
    user_id text NOT NULL,
    token text NOT NULL UNIQUE,
    expires_at timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- USER_PERMISSIONS TABLE (Role-based access control)
-- =====================================================
CREATE TABLE public.user_permissions (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id text NOT NULL,
    permission text NOT NULL, -- 'read', 'write', 'delete', 'admin'
    resource text, -- 'jobs', 'proposals', 'users', 'projects'
    granted_by text,
    granted_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE,
    FOREIGN KEY (granted_by) REFERENCES public.users(id) ON DELETE SET NULL
);

-- =====================================================
-- PASSWORD_RESET_TOKENS TABLE (Security)
-- =====================================================
CREATE TABLE public.password_reset_tokens (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id text NOT NULL,
    token text NOT NULL UNIQUE,
    expires_at timestamp without time zone NOT NULL,
    used boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================
CREATE INDEX idx_users_email ON public.users(email);
CREATE INDEX idx_users_user_type ON public.users(user_type);
CREATE INDEX idx_users_status ON public.users(status);

CREATE INDEX idx_jobs_client_id ON public.jobs(client_id);
CREATE INDEX idx_jobs_approval_status ON public.jobs(approval_status);
CREATE INDEX idx_jobs_status ON public.jobs(status);
CREATE INDEX idx_jobs_category ON public.jobs(category);
CREATE INDEX idx_jobs_created_at ON public.jobs(created_at DESC);

CREATE INDEX idx_proposals_job_id ON public.proposals(job_id);
CREATE INDEX idx_proposals_freelancer_id ON public.proposals(freelancer_id);
CREATE INDEX idx_proposals_status ON public.proposals(status);

CREATE INDEX idx_projects_client_id ON public.projects(client_id);
CREATE INDEX idx_projects_freelancer_id ON public.projects(freelancer_id);
CREATE INDEX idx_projects_status ON public.projects(status);

CREATE INDEX idx_messages_sender_id ON public.messages(sender_id);
CREATE INDEX idx_messages_receiver_id ON public.messages(receiver_id);
CREATE INDEX idx_messages_created_at ON public.messages(created_at DESC);

CREATE INDEX idx_user_sessions_token ON public.user_sessions(token);
CREATE INDEX idx_user_sessions_expires_at ON public.user_sessions(expires_at);

-- =====================================================
-- SAMPLE DATA STRUCTURE COMMENTS
-- =====================================================

-- User Types: 'admin', 'client', 'freelancer'
-- User Status: 'active', 'pending', 'suspended'
-- Job Approval Status: 'pending', 'approved', 'rejected'
-- Job Status: 'active', 'closed', 'suspended'
-- Proposal Status: 'pending', 'accepted', 'rejected', 'suspended'
-- Contract Status: 'active', 'completed', 'cancelled'
-- Project Status: 'active', 'completed', 'cancelled', 'in_progress'

-- =====================================================
-- WORKFLOW NOTES
-- =====================================================

-- 1. Job Posting Workflow:
--    Client posts job -> status: 'pending' approval
--    Admin reviews -> approves/rejects
--    Approved jobs appear publicly
--    Freelancers can apply to approved jobs

-- 2. Proposal Workflow:
--    Freelancer submits proposal -> status: 'pending'
--    Client reviews proposals -> accepts/rejects
--    Accepted proposal creates contract
--    Contract can create project for collaboration

-- 3. Project Workflow:
--    Contract creates project
--    Team members added via project_members
--    Tasks created and assigned
--    Communication via project_messages
--    Files shared via project_files

-- 4. Messaging Workflow:
--    Direct messages between users
--    Can be linked to jobs/proposals
--    Read status tracking
--    Conversation threading

-- 5. Admin Moderation:
--    Users can be suspended/deleted
--    Jobs can be approved/rejected/suspended
--    Proposals can be suspended/deleted
--    Full audit trail maintained

-- =====================================================
-- END OF SCHEMA
-- =====================================================